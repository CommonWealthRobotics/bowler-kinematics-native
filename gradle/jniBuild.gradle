apply {
    plugin 'cpp'
    plugin 'edu.wpi.first.NativeUtils'
    plugin 'edu.wpi.first.GradleJni'
}

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath group: "org.apache.commons",
                name: "commons-lang3",
                version: property("commons-lang3.version")

    }
}

nativeUtils.addWpiNativeUtils()
nativeUtils.withRaspbian()
nativeUtils.withBionic()
nativeUtils.wpi.addWarnings()
nativeUtils.setSinglePrintPerPlatform()

toolchainsPlugin.crossCompilers.named(nativeUtils.wpi.platforms.raspbian) {
    optional.set(false)
}

toolchainsPlugin.crossCompilers.named(nativeUtils.wpi.platforms.aarch64bionic) {
    optional.set(false)
}

toolchainsPlugin.crossCompilers.named(nativeUtils.wpi.platforms.roborio) {
    optional.set(true)
}

model {
    components {
        all {
            nativeUtils.useAllPlatforms(it)
        }

        bowler_kinematics_native_native_library(JniNativeLibrarySpec) {
            enableCheckTask true
            javaCompileTasks << compileJava

            jniCrossCompileOptions << JniCrossCompileOptions(nativeUtils.wpi.platforms.raspbian)
            jniCrossCompileOptions << JniCrossCompileOptions(nativeUtils.wpi.platforms.aarch64bionic)

            sources {
                cpp {
                    source {
                        srcDirs 'src/main/native/cpp'
                        include '**/*.cpp'
                    }

                    exportedHeaders {
                        srcDir 'src/main/native/include'
                        if (project.hasProperty('generatedHeaders')) {
                            srcDir generatedHeaders
                        }

                        include '**/*.h'
                    }
                }
            }

            nativeUtils.usePlatformArguments(it)

            if (ext.get("currentArch").contains("windows")) {
                binaries.all {
                    cppCompiler.args.add("/Zc:__cplusplus")
                }
            }
        }
    }

    tasks {
        def c = $.components
        def found = false
        c.each {
            if (it in JniNativeLibrarySpec) {
                def bin = it.binaries.withType(SharedLibraryBinarySpec).each {
                    if (found) {
                        return
                    }

                    def arch = it.targetPlatform.name
                    println("target: " + arch + ", current: " + ext.get("currentArch") + "; " + it.buildType.name)

                    // Don't depend on rio build
                    if (!arch.contains("athena")) {
                        jar.dependsOn(it.tasks.link)
                    }

                    // Only include the release variant binary for the current platform
                    if (arch != ext.get("currentArch") || it.buildType.name != 'release') {
                        return
                    }

                    found = true

                    def filePath = it.tasks.link.linkedFile.get().asFile.parentFile
                    test.systemProperty 'java.library.path', filePath
                    test.environment 'LD_LIBRARY_PATH', filePath
                    // Enable this if you make this a java application
                    //run.systemProperty 'java.library.path', filePath
                    //run.environment 'LD_LIBRARY_PATH', filePath

                    test.dependsOn(it.tasks.link)
                }
            }
        }
    }
}
